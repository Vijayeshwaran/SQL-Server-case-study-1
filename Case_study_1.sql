SELECT * FROM Fact;
SELECT * FROM Location;
SELECT * FROM Product;
-- 1. Display the number of states present in the LocationTable. 
SELECT COUNT(DISTINCT State) AS Number_of_states FROM Location; 
-- 2. How many products are of regular type?
SELECT COUNT(DISTINCT Product_Type) AS Number_of_product FROM Product WHERE Type = 'Regular';
-- 3. How much spending has been done on marketing of product ID 1?
SELECT SUM(Marketing) AS Spending FROM Fact f WHERE ProductId = 1;
-- 4. What is the minimum sales of a product?
SELECT p.Product_Type, MIN(Sales) AS min_sales FROM Fact f
JOIN
Product p ON f.ProductId = p.ProductId
GROUP BY Product_Type;
-- 5. Display the max Cost of Good Sold (COGS).
SELECT MAX(COGS) AS max_cost FROM Fact;
-- 6. Display the details of the product where product type is coffee. 
SELECT f.*, p.Product_Type, p.Product, p.Type FROM Product p
JOIN
Fact f
ON f.ProductId = p.ProductId
WHERE Product_Type = 'Coffee';
-- 7. Display the details where total expenses are greater than 40. 
SELECT * FROM Fact WHERE Total_Expenses > 40 ORDER BY Total_Expenses;
-- 8. What is the average sales in area code 719?
SELECT AVG(Sales) AS avg_sales FROM Fact WHERE Area_Code = 719;
-- 9. Find out the total profit generated by Colorado state.
SELECT state,SUM(profit) AS Total_profit FROM Fact f
JOIN Location l ON
f.Area_code = l.Area_code
GROUP  BY state HAVING state = 'colorado'
-- 10. Display the average inventory for each product ID. 
SELECT ProductId, AVG(Inventory) AS Avg_inventory FROM Fact GROUP BY ProductId;
-- 11. Display state in a sequential order in a Location Table. 
SELECT DISTINCT State FROM Location ORDER BY State;
-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT product, AVG(budget_margin) as Avg_Budget_Mrg from Fact f
JOIN product p
ON f.productid = p.productid
GROUP BY product HAVING AVG(budget_margin) > 100;
-- 13. What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS Total_sales FROM Fact WHERE Date = '2010-01-01';
-- 14. Display the average total expense of each product ID on an individual date. 
SELECT Date, ProductId, AVG(Total_Expenses) AS Avg_total_expense FROM Fact GROUP BY Date, ProductId ORDER BY ProductId;
-- 15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
SELECT f.Date, f.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.state, f.Area_Code FROM Fact f
JOIN Product p
ON f.ProductId = p.ProductId
JOIN Location l
ON f.Area_Code = l.Area_Code;
-- 16. Display the rank without any gap to show the sales wise rank. 
SELECT Productid, Profit, Sales, Dense_rank()OVER(ORDER BY sales DESC) AS sales_rank FROM Fact
-- 17. Find the state wise profit and sales.
SELECT l.State, SUM(f.Profit) AS Profit, SUM(f.Sales) AS Sales FROM Fact f
JOIN
Location l ON f.Area_Code = l.Area_Code
GROUP BY l.State;
-- 18. Find the state wise profit and sales along with the productname. 
SELECT l.State, p.Product, SUM(f.Profit) AS Profit, SUM(f.Sales) AS Sales FROM Fact f
JOIN
Location l ON f.Area_Code = l.Area_Code
JOIN
Product p ON p.ProductId = f.ProductId
GROUP BY l.State, p.Product;
-- 19. If there is an increase in sales of 5%, calculate the increased sales. 
SELECT sales, (sales * 0.05) AS increase_in_sales FROM Fact;
-- 20. Find the maximum profit along with the product ID and producttype. 
SELECT t.Max_profit,t.ProductId, p.Product_Type FROM Product p
JOIN
(SELECT ProductId, Profit AS Max_profit FROM Fact WHERE Profit = 
(SELECT MAX(Profit) FROM Fact))t ON p.ProductId = t.ProductId;
-- 21. Create a stored procedure to fetch the result according to the product type.
CREATE PROCEDURE PType @Prod_typ VARCHAR(20) AS
SELECT * FROM Product
Where Product_Type = @Prod_typ
Exec PType @Prod_typ = 'Coffee'
Exec PType @Prod_typ = 'Tea';
-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
SELECT total_expenses,IIF(total_expenses<60,'profit','loss') AS Status from fact;
-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
Select Date,productid,
SUM(Sales)as Total_Sale from
fact
group by Date,productid
with Rollup;
-- 24. Apply union and intersection operator on the tables which consist of attribute area code. 
SELECT Area_Code FROM Fact
UNION
SELECT Area_Code FROM Location;
SELECT Area_Code FROM Fact
INTERSECT
SELECT Area_Code FROM Location;
-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
CREATE FUNCTION Product_type_pid(@i INT)
RETURNS TABLE
AS
RETURN
	SELECT Product_type FROM Product WHERE ProductId = @i;
SELECT * FROM Product_type_pid(1);
-- 26. Change the product type from coffee to tea where product ID is 1 and undo it. 
BEGIN TRAN Coffee_to_tea
UPDATE Product SET Product_Type = 'tea' WHERE Product_Type = 'Coffee' AND ProductId = 1
ROLLBACK;
-- 27. Display the date, product ID and sales where total expenses are between 100 to 200. 
SELECT Date, ProductId, Sales FROM Fact WHERE Total_Expenses BETWEEN 100 AND 200;
-- 28. Delete the records in the Product Table for regular type. 
DELETE Product WHERE type = 'Regular';
-- 29. Display the ASCII value of the fifth character from the columnProduct
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCII_of_product FROM Product;